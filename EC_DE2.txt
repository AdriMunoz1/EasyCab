import threading
import sys
import time
from kafka import KafkaProducer, KafkaConsumer
import socket

# Variables globales
taxi_status_lock = threading.Lock()
STATUS_TAXI = "OK"
POSITION_TAXI = (1, 1)


def get_parameters():
    if len(sys.argv) != 8:
        print("Uso: python EC_DE.py <IP_Central> <Port_Central> <IP_Broker> <Port_Broker> <IP_S> <Port_S> <ID_Taxi>")
        sys.exit(1)

    ip_central = sys.argv[1]
    port_central = int(sys.argv[2])
    ip_broker = sys.argv[3]
    port_broker = int(sys.argv[4])
    ip_s = sys.argv[5]
    port_s = int(sys.argv[6])
    id_taxi = int(sys.argv[7])

    return ip_central, port_central, ip_broker, port_broker, ip_s, port_s, id_taxi


def send_message(socket, message):
    try:
        socket.send(message.encode("utf-8"))
    except Exception as e:
        print(f"Error al enviar mensaje: {e}")


def receive_message(socket):
    try:
        return socket.recv(1024).decode("utf-8")
    except Exception as e:
        print(f"Error al recibir mensaje: {e}")
        return ""


# Validar el taxi con EC_Central
def validate_taxi(id_taxi, socket_central):
    try:
        msg = f"AUTH#{id_taxi}"
        socket_central.send(msg.encode("utf-8"))

        response = socket_central.recv(1024).decode("utf-8")
        print(f"Respuesta de EC_Central: {response}")

        if response == "OK":
            print("Taxi SÍ autenticado")
            return True
        else:
            print("Taxi NO autenticado")
            return False

    except Exception as e:
        print(f"Error al autenticar el taxi: {e}")
        return False


# Enviar posición a EC_Central
def send_taxi_position_to_central(socket_central, id_taxi, position_taxi):
    try:
        message = f"POSITION#{id_taxi}#{position_taxi}"
        socket_central.send(message.encode('utf-8'))

    except Exception as e:
        print(f"Error al enviar la posición del taxi {id_taxi}: {e}")


def update_position(destination):
    x, y = POSITION_TAXI

    if x < destination[0]:
        x += 1
    elif x > destination[0]:
        x -= 1

    if y < destination[1]:
        y += 1
    elif y > destination[1]:
        y -= 1

    return (x, y)


def move_taxi_to_destination(producer, destination):
    while POSITION_TAXI != destination:
        with taxi_status_lock:
            if STATUS_TAXI == "KO":
                print(f"Taxi detenido en {POSITION_TAXI}")
                return
        position_taxi = update_position(destination)
        time.sleep(1)
        send_taxi_position_to_central(producer)
        print(f"Taxi moviéndose a {position_taxi}")


# Iniciar el hilo de movimiento
def start_moving_thread(socket_central, id_taxi):
    if not is_moving_thread_running:
        taxi_thread = threading.Thread(target=move_taxi_to_destination, args=(destination_position, socket_central, id_taxi))
        taxi_thread.start()
        is_moving_thread_running = True


def handle_central_commands(socket_central, thread_taxi, producer, consumer, destination):
    for message in consumer:
        command = message.value.decode('utf-8')
        print(f"Comando recibido: {command}")
        if command.startswith("STOP#"):
            with taxi_status_lock:
                STATUS_TAXI = "KO"
            send_message(socket_central, "OK")
        elif command.startswith("RESUME#"):
            with taxi_status_lock:
                STATUS_TAXI = "OK"
            send_message(socket_central, "OK")
            if thread_taxi and not thread_taxi.is_alive():
                taxi_thread = threading.Thread(target=move_taxi_to_destination, args=(producer, destination))
                taxi_thread.start()
        elif command.startswith("DESTINATION#"):
            destination = eval(command.split("#")[2])
            print(f"Nuevo destino: {destination}")
            if thread_taxi and thread_taxi.is_alive():
                print("Taxi en movimiento, esperando a que termine.")
            else:
                taxi_thread = threading.Thread(target=move_taxi_to_destination, args=(producer, destination))
                taxi_thread.start()


# Función para manejar señales de EC_S
def handle_sensor_signals(client_socket, addr, central_socket, taxi_id):
    try:
        sensor_socket = client_socket  # Guardar el socket para usarlo en reanudación
        while True:
            signal = client_socket.recv(1024).decode('utf-8')
            if signal == "KO":
                print("Sensor envió KO, notificando a EC_Central para detener el taxi")
                msg = f"STOP#{taxi_id}"
                central_socket.send(msg.encode("utf-8"))
                with taxi_status_lock:
                    STATUS_TAXI = "KO"  # Detener el taxi
                client_socket.send("KO".encode("utf-8"))
                time.sleep(5)  # Pausa de 5 segundos
                msg = f"RESUME#{taxi_id}"
                central_socket.send(msg.encode("utf-8"))
                with taxi_status_lock:
                    STATUS_TAXI = "OK"  # Reanudar el taxi
            #else:
              #  print(f"Señal no reconocida del sensor {addr}: {signal}")
    except Exception as e:
        print(f"Error manejando la señal del sensor {addr}: {e}")
    finally:
        client_socket.close()


# Escuchar señales de EC_S
def run_sensor_server(socket_central, ip_central, id_taxi):
    port_taxi = 8000 + id_taxi
    socket_taxi = None

    try:
        socket_taxi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket_taxi.bind((ip_central, port_taxi))
        socket_taxi.listen()
        print(f"Servidor de sensores del taxi {id_taxi} escuchando en {ip_central}:{port_taxi}")

        while True:
            socket_client, addr = socket_taxi.accept()
            print(f"Conexión aceptada de {addr[0]}:{addr[1]}")
            thread = threading.Thread(target=handle_sensor_signals, args=(socket_client, addr, socket_central, id_taxi))
            thread.start()
    except Exception as e:
        print(f"Error en el servidor del taxi: {e}")
    finally:
        socket_taxi.close()


def main():
    ip_central, port_central, ip_broker, port_broker, ip_s, port_s, id_taxi = get_parameters()

    socket_central = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socket_central.bind((ip_central, port_central))

    # Validar el taxi con el servidor central usando la IP y el puerto proporcionados
    if validate_taxi(ip_central, port_central, id_taxi):

        # Ejecutar el servidor del taxi para escuchar señales de EC_S
        thread_taxi = threading.Thread(target=run_sensor_server, args=(socket_central, ip_central, id_taxi))
        thread_taxi.start()

        # Iniciar un hilo para manejar comandos de EC_Central
        central_command_thread = threading.Thread(target=handle_central_commands, args=(socket_central, id_taxi))
        central_command_thread.start()

    else:
        print("Autenticación fallida.")
        if socket_central:
            socket_central.close()


if __name__ == "__main__":
    main()
